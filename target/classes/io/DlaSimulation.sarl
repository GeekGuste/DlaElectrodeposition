package io

import java.util.UUID
import io.sarl.bootstrap.SREBootstrap
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Event
import io.sarl.core.OpenEventSpace
import gui.EnvironmentUi
import io.sarl.bootstrap.SRE
import java.util.concurrent.ConcurrentHashMap

class DlaSimulation implements EventListener {

	public static val id = UUID::randomUUID

	var kernel : SREBootstrap

	var defaultSARLContext : AgentContext
	
	var population : Population
	
	var group : ConcurrentHashMap<UUID, ParticleBody>

	var ^space : OpenEventSpace
	
	val dimensions: ParticleBody

	var myGUI : EnvironmentUi

	new {
		val scale = 2;
		val width = scale * 320
		val height = scale * 234
		dimensions = new ParticleBody(width, height)
		this.population = new Population(dimensions)
	}

	def start : void {
		kernel = SRE::getBootstrap
		defaultSARLContext = kernel.startWithoutAgent
		
		^space = defaultSARLContext.defaultSpace as OpenEventSpace
		
		// Chargement des particules
		group = new ConcurrentHashMap<UUID, ParticleBody>
		// population.particles = new ConcurrentHashMap
		var centre = new ParticleBody(dimensions.coordX / 2, dimensions.coordY / 2)
		centre.mouvement = false
		centre.PARTICLE_COLOR = Setting::AMA_FIRST_COLOR
		this.group.put(UUID.randomUUID, centre)
		for (i : 1 .. Setting::NUMBER_OF_PARTICLES) {
			val coordX = (Math.random() * dimensions.coordX) as int
			val coordY = (Math.random() * dimensions.coordY) as int
			val uuid = UUID.randomUUID
			var p = new ParticleBody(coordX, coordY)
			kernel.startAgentWithID(typeof(ParticleAgent), uuid, p)
			p.owner = uuid
			this.group.put(uuid, p)
			System.out.println( "Agent " + i)
		}

		//Notre interface utilisateur
		this.myGUI = new EnvironmentUi(this.dimensions, ^space, this.group)


		// Registering to receive GUIRepaint events
		^space.register(this)
		// Sending start to Environment
		//^space.emit(id, new Start(this.boidBodies))
	}
	
	override receiveEvent(^event : Event) {
		if (^event instanceof GuiRepaint) { // event from the environment, GUI must be refreshed
			this.myGUI.group = group 
			this.myGUI.repaint
		}
	}
	
	def getID : UUID {
		return id
	}
	
}
